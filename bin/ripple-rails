#!/usr/bin/env ruby

lib = File.expand_path('../../lib', __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require 'ripple-rails'
require 'eventmachine'
require 'faye/websocket'
require 'rippler'
require 'json'

load_environment
config = load_config
controller, action = config && config[:action] ? config[:action].split(/#/, 2) : []

err 'Ripple action not properly configured.' unless controller && action
err "No class #{controller} found for Ripple action." unless Module::const_defined?(controller)

controller = Module::const_get(controller)

err "Ripple action #{controller}##{action} not found." unless controller.new.respond_to?(action)

$running = true

Signal.trap("TERM") do
  EM.stop
  $running = false
end

while($running) do

	EM.run {
		ws = Faye::WebSocket::Client.new(config[:websocket] || Rippler::RIPPLE_URI)

		ws.onopen = lambda do |event|
			cmd = {'command' => 'subscribe', 'streams' => ['transactions']}
			if config[:address]
				adr = config[:address].is_a?(Array) ? config[:address] : [config[:address].to_s]
				cmd.merge!('accounts' => adr)
				warn "Monitoring for transactions to #{adr.inspect}..."
			else
				warn 'Monitoring for transactions...'
			end

			ws.send(cmd.to_json)
		end

		ws.onmessage = lambda do |event|
			message = JSON.parse(event.data) rescue {}
			if message['type'] == 'transaction' && message['validated'] == true && message['transaction']['TransactionType'] == 'Payment'
				begin
					run_action(controller, :notify, {:transaction => Rippler::Transaction.new(message)})
				rescue Exception
					warn $!.inspect
				end
			end
		end

		ws.onerror = lambda do |event|
			warn event["error"].inspect
			EM.stop
		end

		ws.onclose = lambda do |event|
			ws = nil
			warn 'Websocket connection closed'
			EM.stop
		end
	}

end